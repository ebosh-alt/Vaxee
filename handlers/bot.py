import json
import random
import string

import requests
from aiogram import F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton, WebAppInfo
from yoomoney import Client
from yoomoney import Quickpay
import logging
from data.config import *
from entity.database import Transaction
from service.GetMessage import get_mes, get_text
from service.states import Form
from service.keyboards import Keyboards as kb

logger = logging.getLogger(__name__)
router = Router()


def generate_random_string(length):
    letters = string.ascii_lowercase
    rand_string = ''.join(random.choice(letters) for _ in range(length))
    return rand_string


@router.message(Command('start'))
async def reg_step1(message: Message):
    User = db.is_register(message.from_user.id)
    if not bonus_system.in_(message.from_user.id):
        bonus_system.create_entity(message.from_user.id)
    if not usdt_requisites.in_(message.from_user.id):
        usdt_requisites.create_entity(message.from_user.id)
    user_channel_status = await bot.get_chat_member(chat_id=f'{channel}', user_id=message.from_user.id)
    logger.info(f"user {message.from_user.id} channel status: {user_channel_status.status}")
    row1 = [KeyboardButton(text='üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')]
    row2 = [KeyboardButton(text='üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')]
    row3 = [KeyboardButton(text='üí∏ –ö–æ—à–µ–ª—ë–∫'), KeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')]
    row4 = [KeyboardButton(text='üì† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'), KeyboardButton(text='‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')]
    # row5 = [KeyboardButton(text="üóíÔ∏è –ó–∞–¥–∞–Ω–∏—è")]
    rows = [row1, row2, row3, row4]
    keyboard_menu = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
    if User is None:
        db.new_user(message.from_user.id, message.from_user.username)
        if len(message.text.split(' ')) == 2:
            db.set_referral(message.from_user.id, int(message.text.split(' ')[1]))
        row1 = [InlineKeyboardButton(text='üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª', url=f't.me/{channel[1:]}')]
        row2 = [InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='check-subscribe')]
        rows = [row1, row2]
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
        await message.answer(text='–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª:', reply_markup=keyboard)
    elif user_channel_status.status != 'left':
        return await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!', reply_markup=keyboard_menu)
    elif user_channel_status.status == 'left':
        row1 = [InlineKeyboardButton(text='üì∞ –ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª', url=f't.me/{channel[1:]}')]
        row2 = [InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='check-subscribe')]
        rows = [row1, row2]
        keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
        await message.answer(text='–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª:', reply_markup=keyboard)
    else:
        await message.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!', reply_markup=keyboard_menu)
        user = db.get_profile(message.from_user.id)
        db.update_referal(message.from_user.id, user["referal"])
        # if len(message.text.split(' ')) == 2:
        #     db.update_referal(message.from_user.id, user['referal_id'])
        if user[9] != 0:
            refPrize = db.get_refPrize()
            await bot.send_message(chat_id=user['referal_id'],
                                   text=f'‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\nüíµ <b>{refPrize[0]}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\nüí∏ <b>5 VaxCoin</b>',
                                   parse_mode='HTML')


@router.callback_query(F.data.in_(['check-subscribe']))
async def reg_step2(callback: CallbackQuery):
    user_channel_status = await bot.get_chat_member(chat_id=f'{channel}', user_id=callback.from_user.id)
    user_id = callback.from_user.id
    if user_channel_status.status != 'left':
        await callback.message.delete()
        row1 = [KeyboardButton(text='üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')]
        row2 = [KeyboardButton(text='üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')]
        row3 = [KeyboardButton(text='üí∏ –ö–æ—à–µ–ª—ë–∫'), KeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')]
        row4 = [KeyboardButton(text='üì† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'), KeyboardButton(text='‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')]
        # row5 = [KeyboardButton(text='üóíÔ∏è –ó–∞–¥–∞–Ω–∏—è')]
        rows = [row1, row2, row3, row4]
        keyboard = ReplyKeyboardMarkup(keyboard=rows, resize_keyboard=True)
        await bot.send_message(chat_id=callback.from_user.id, text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!',
                               reply_markup=keyboard)
        logger.info(user_id)
        user = db.get_profile(user_id)
        # if len(ca.text.split(' ')) == 2:
        if user[9] != 0:
            refPrize = db.get_refPrize()
            db.update_referal(callback.from_user.id, user["referal"])
            await bot.send_message(chat_id=user[9],
                                   text=f'‚úÖ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å –∑–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞\n\nüíµ <b>{refPrize[0]}‚ÇΩ</b> –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\nüí∏ <b>5 VaxCoin</b>',
                                   parse_mode='HTML')

    else:
        await callback.answer('‚ùé –í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª!', show_alert=True)


@router.message(F.text == 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏')
async def invest(message: Message, state: FSMContext):
    await state.clear()
    info = db.get_investINFO(message.from_user.id)
    msg = f'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –∏ –ø–æ–ª—É—á–∞–π <b>—Å—Ç–∞–±–∏–ª—å–Ω—É—é –ø—Ä–∏–±—ã–ª—å:</b>\n\nüì† –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –≤–∫–ª–∞–¥–∞: <b>{info[0]}%</b>\nüí∏ –í–∞—à –≤–∫–ª–∞–¥: <b>{info[1]} RUB</b>\nüì§ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{info[2]} RUB</b> <a href="https://habrastorage.org/webt/jf/64/r-/jf64r-bemwiu__rsdx2spu3chte.png">‚†Ä</a>'
    row = [InlineKeyboardButton(text='‚ûï –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data='invest')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await message.answer(text=msg, reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.in_(['cash-in']))
async def cash_in(callback: CallbackQuery):
    row1 = [InlineKeyboardButton(text='‚ûï Keksik', web_app=WebAppInfo(url='https://tg.keksik.io/@Vaxee_bot'))]
    row2 = [InlineKeyboardButton(text='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='cash-inADMIN')]
    # row3 = [InlineKeyboardButton(text='‚ûï Yoomoney', callback_data='cash_inSITE-card')]
    # row4 = [InlineKeyboardButton(text='‚ûï Freekasssa', callback_data='cash_in_freekassa')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è <a href="https://habrastorage.org/webt/kz/bx/11/kzbx11ebx15rp8kij6rfytgk0xg.png">‚†Ä</a>',
                           reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.in_(['cash-inADMIN']))
async def cash_inADMIN(callback: CallbackQuery):
    # InlineKeyboardButton(text='‚ûï ETHEREUM', callback_data='cash_inADMIN-eth')
    row1 = [InlineKeyboardButton(text='‚ûï USDT', callback_data='cash_inADMIN-usdt')]
    row2 = [InlineKeyboardButton(text='‚ûï TON', callback_data='cash_inADMIN-ton')]
    row3 = [InlineKeyboardButton(text='‚ûï BITCOIN', callback_data='cash_inADMIN-btc'),
            InlineKeyboardButton(text='‚ûï LTC', callback_data='cash_inADMIN-ltc')]
    row4 = [InlineKeyboardButton(text='‚ûï ATOM', callback_data='cash_inADMIN-atom'),
            InlineKeyboardButton(text='‚ûï SOL', callback_data='cash_inADMIN-sol')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2, row3, row4])
    await bot.send_message(chat_id=callback.from_user.id, text='üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã',
                           reply_markup=keyboard)


@router.callback_query(F.data.in_(['cash_inADMIN-usdt']))
async def cash_inADMIN_card(callback: CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text=get_mes("replenishment_usdt"),
                           disable_web_page_preview=True,
                           reply_markup=kb.usdt_network_kb)


@router.callback_query(F.data.in_(['usdt_network_trc_20', "usdt_network_bep_20", "usdt_network_ton"]))
async def usdt_network(message: CallbackQuery):
    id = message.from_user.id
    if message.data == "usdt_network_trc_20":
        text = get_text(get_mes("usdt_trc20"))
    elif message.data == "usdt_network_bep_20":
        text = get_text(get_mes("usdt_bep20"))
    else:
        text = get_text(get_mes("usdt_ton"))
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data='cash_inADMIN-card-usdt')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=id,
                           text=text,
                           reply_markup=keyboard,
                           parse_mode=ParseMode.MARKDOWN_V2,
                           disable_web_page_preview=True
                           )


@router.callback_query(F.data.in_(['cash_inADMIN-btc']))
async def cash_inADMIN_btc(callback: CallbackQuery):
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data='cash_inADMIN-btc-check')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    name = db.get_rekviziti('btc')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\nüíµ <b>–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n<b>‚ôª–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É</b>\n\n\n‚ñ™ BITCOIN: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)


@router.callback_query(F.data.in_(['cash_inADMIN-eth']))
async def cash_inADMIN_eth(callback: CallbackQuery):
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data='cash_inADMIN-eth-check')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    name = db.get_rekviziti('eth')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\nüíµ <b>–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n<b>‚ôª–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É</b>\n\n\n‚ñ™ ETHEREUM: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)


@router.callback_query(F.data.in_(['cash_inADMIN-ltc']))
async def cash_inADMIN_ltc(callback: CallbackQuery):
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data='cash_inADMIN-ltc-check')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    name = db.get_rekviziti('ltc')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\nüíµ <b>–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n<b>‚ôª–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É</b>\n\n\n‚ñ™ LTC: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)


@router.callback_query(F.data.in_(['cash_inADMIN-ton']))
async def cash_inADMIN_ton(callback: CallbackQuery):
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data='cash_inADMIN-ton-check')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    name = db.get_rekviziti('ton')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å —Ç–æ–ª—å–∫–æ\n\n<b>Toncoin TON</b> –∏ —Ç–æ–∫–µ–Ω—ã –≤ —Å–µ—Ç–∏ <b>TON</b>, –∏–Ω–∞—á–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤–æ–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞.\n\nüíµ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É\n\n<b>‚ôªÔ∏è –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>\n\n\n TON: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)


@router.callback_query(F.data.in_(['cash_inADMIN-atom']))
async def cash_inADMIN_atom(callback: CallbackQuery):
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data='cash_inADMIN-atom-check')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    name = db.get_rekviziti('atom')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\nüíµ <b>–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n<b>‚ôª–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É</b>\n\n\n‚ñ™ ATOM: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)


@router.callback_query(F.data.in_(['cash_inADMIN-sol']))
async def cash_inADMIN_sol(callback: CallbackQuery):
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª', callback_data='cash_inADMIN-sol-check')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    name = db.get_rekviziti('sol')
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üí∏ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—É–º–º—É –∏ <b>—Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã</b>\n\nüíµ <b>–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n<b>‚ôª–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ –Ω—ã–Ω–µ—à–Ω–µ–º—É –∫—É—Ä—Å—É</b>\n\n\n‚ñ™ SOL: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', disable_web_page_preview=True, reply_markup=keyboard)


@router.callback_query(F.data.in_(['cash_inADMIN-card-usdt']))
async def checkpaymentADMIN_card(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_usdt)


@router.callback_query(F.data.in_(['cash_inADMIN-card-check']))
async def checkpaymentADMIN_card(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_card)


@router.callback_query(F.data.in_(['cash_inADMIN-btc-check']))
async def checkpaymentADMIN_btc(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_btc)


@router.callback_query(F.data.in_(['cash_inADMIN-eth-check']))
async def checkpaymentADMIN_eth(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_eth)


@router.callback_query(F.data.in_(['cash_inADMIN-ltc-check']))
async def checkpaymentADMIN_ltc(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_ltc)


@router.callback_query(F.data.in_(['cash_inADMIN-ton-check']))
async def checkpaymentADMIN_ton(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_ton)


@router.callback_query(F.data.in_(['cash_inADMIN-atom-check']))
async def checkpaymentADMIN_atom(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_atom)


@router.callback_query(F.data.in_(['cash_inADMIN-sol-check']))
async def checkpaymentADMIN_sol(callback: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
    await state.set_state(Form.cash_inADMIN_sol)


@router.message(Form.cash_inADMIN_usdt)
async def checkAdmin_card(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-usdt {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-usdt {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_card=message)
    await state.set_state(Form.cash_inADMIN_card)
    await state.clear()


@router.message(Form.cash_inADMIN_card)
async def checkAdmin_card(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-card {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-card {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_card=message)
    await state.set_state(Form.cash_inADMIN_card)
    await state.clear()


@router.message(Form.adminVvod_card)
async def adminVvod_card(message: Message, state: FSMContext):
    try:
        info = message.text.split(', ')
        userId = info[0]
        summa = float(info[1])
        db.give_investBalance(userId, summa)
        db.update_popolnili(summa)
        ref = db.get_ref(userId)
        if ref[0] != 0:
            db.give_investBalance(ref[0], summa * 0.05)
            db.update_refDoxod(ref[0], summa * 0.05)
        await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {userId}')
        await bot.send_message(chat_id=userId, text='‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                               parse_mode='HTML')
        await state.update_data(adminVvod_card=message.text)
        await state.set_state(Form.adminVvod_card)
        await state.clear()
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.message(Form.cash_inADMIN_btc)
async def checkAdmin_btc(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-btc {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-btc {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_btc=message)
    await state.set_state(Form.cash_inADMIN_btc)
    await state.clear()


@router.message(Form.adminVvod_btc)
async def adminVvod_btc(message: Message, state: FSMContext):
    try:
        info = message.text.split(', ')
        userId = info[0]
        summa = float(info[1])
        db.give_investBalance(userId, summa)
        db.update_popolnili(summa)
        ref = db.get_ref(userId)
        if ref[0] != 0:
            db.give_investBalance(ref[0], summa * 0.05)
            db.update_refDoxod(ref[0], summa * 0.05)
        await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {userId}')
        await bot.send_message(chat_id=userId, text='‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                               parse_mode='HTML')
        await state.update_data(adminVvod_btc=message.text)
        await state.set_state(Form.adminVvod_btc)
        await state.clear()
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.message(Form.cash_inADMIN_eth)
async def checkAdmin_eth(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-eth {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-eth {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_eth=message)
    await state.set_state(Form.cash_inADMIN_eth)
    await state.clear()


@router.message(Form.adminVvod_eth)
async def adminVvod_eth(message: Message, state: FSMContext):
    try:
        info = message.text.split(', ')
        userId = info[0]
        summa = float(info[1])
        db.give_investBalance(userId, summa)
        db.update_popolnili(summa)
        ref = db.get_ref(userId)
        if ref[0] != 0:
            db.give_investBalance(ref[0], summa * 0.05)
            db.update_refDoxod(ref[0], summa * 0.05)
        await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {userId}')
        await bot.send_message(chat_id=userId, text='‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                               parse_mode='HTML')
        await state.update_data(adminVvod_eth=message.text)
        await state.set_state(Form.adminVvod_eth)
        await state.clear()
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.message(Form.cash_inADMIN_ltc)
async def checkAdmin_ltc(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-ltc {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-ltc {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_ltc=message)
    await state.set_state(Form.cash_inADMIN_ltc)
    await state.clear()


@router.message(Form.adminVvod_ltc)
async def adminVvod_ltc(message: Message, state: FSMContext):
    try:
        info = message.text.split(', ')
        userId = info[0]
        summa = float(info[1])
        db.give_investBalance(userId, summa)
        db.update_popolnili(summa)
        ref = db.get_ref(userId)
        if ref[0] != 0:
            db.give_investBalance(ref[0], summa * 0.05)
            db.update_refDoxod(ref[0], summa * 0.05)
        await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {userId}')
        await bot.send_message(chat_id=userId, text='‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                               parse_mode='HTML')
        await state.update_data(adminVvod_ltc=message.text)
        await state.set_state(Form.adminVvod_ltc)
        await state.clear()
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.message(Form.cash_inADMIN_ton)
async def checkAdmin_ton(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-ton {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-ton {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_ton=message)
    await state.set_state(Form.cash_inADMIN_ton)
    await state.clear()


@router.message(Form.adminVvod_ton)
async def adminVvod_ton(message: Message, state: FSMContext):
    try:
        info = message.text.split(', ')
        userId = info[0]
        summa = float(info[1])
        db.give_investBalance(userId, summa)
        db.update_popolnili(summa)
        ref = db.get_ref(userId)
        if ref[0] != 0:
            db.give_investBalance(ref[0], summa * 0.05)
            db.update_refDoxod(ref[0], summa * 0.05)
        await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {userId}')
        await bot.send_message(chat_id=userId, text='‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                               parse_mode='HTML')
        await state.update_data(adminVvod_ton=message.text)
        await state.set_state(Form.adminVvod_ton)
        await state.clear()
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.message(Form.cash_inADMIN_atom)
async def checkAdmin_atom(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-atom {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-atom {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_atom=message)
    await state.set_state(Form.cash_inADMIN_atom)
    await state.clear()


@router.message(Form.adminVvod_atom)
async def adminVvod_atom(message: Message, state: FSMContext):
    try:
        info = message.text.split(', ')
        userId = info[0]
        summa = float(info[1])
        db.give_investBalance(userId, summa)
        db.update_popolnili(summa)
        ref = db.get_ref(userId)
        if ref[0] != 0:
            db.give_investBalance(ref[0], summa * 0.05)
            db.update_refDoxod(ref[0], summa * 0.05)
        await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {userId}')
        await bot.send_message(chat_id=userId, text='‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                               parse_mode='HTML')
        await state.update_data(adminVvod_atom=message.text)
        await state.set_state(Form.adminVvod_atom)
        await state.clear()
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.message(Form.cash_inADMIN_sol)
async def checkAdmin_sol(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ù–∞—á–∏—Å–ª–∏—Ç—å', callback_data=f'admin-vvod-sol {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-sol {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(cash_inADMIN_sol=message)
    await state.set_state(Form.cash_inADMIN_sol)
    await state.clear()


@router.message(Form.adminVvod_sol)
async def adminVvod_sol(message: Message, state: FSMContext):
    try:
        info = message.text.split(', ')
        userId = info[0]
        summa = float(info[1])
        db.give_investBalance(userId, summa)
        db.update_popolnili(summa)
        ref = db.get_ref(userId)
        if ref[0] != 0:
            db.give_investBalance(ref[0], summa * 0.05)
            db.update_refDoxod(ref[0], summa * 0.05)
        await message.answer(f'–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ —Å—á–µ—Ç {userId}')
        await bot.send_message(chat_id=userId, text='‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                               parse_mode='HTML')
        await state.update_data(adminVvod_sol=message.text)
        await state.set_state(Form.adminVvod_sol)
        await state.clear()
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


# @router.callback_query(F.data.in_(['cash_inSITE-card']))
# async def cash_inSITE_card(callback: CallbackQuery, state: FSMContext):
#    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥', callback_data='cash-inSITE')]
#    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
#    await bot.send_message(chat_id=callback.from_user.id,
#                           text='‚ñ™ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è - 200‚ÇΩ</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:',
#                           parse_mode='HTML', reply_markup=keyboard)
#    await state.set_state(Form.cash_inSITE_card)


# @router.message(Form.cash_inSITE_card)
# async def cash_inSITE_card_oplata(message: Message, state: FSMContext):
#    try:
#        summa = int(message.text)
#        if summa >= 200:
#            label = generate_random_string(12)
#            quickpay = Quickpay(
#                receiver="4100118701003387",
#                quickpay_form="shop",
#                targets="PREMIUM –°—Ç–∞—Ç—É—Å",
#                paymentType="SB",
#                sum=summa,
#                label=label
#            )
#            row1 = [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=quickpay.redirected_url)]
#            row2 = [InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'cash_inSITE-card-check {label}')]
#            keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
#            msg = f'üí∏ –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>{summa}‚ÇΩ</b>\n\nüíµ <b>–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>\n\n‚úÖ <b>–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç</b>\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>'
#            await message.answer(text=msg, reply_markup=keyboard, parse_mode="HTML", disable_web_page_preview=True)
#            await state.update_data(cash_inSITE_card=int(message.text))
#            await state.set_state(Form.cash_inSITE_card)
#            await state.clear()
#        else:
#            await message.answer('‚ùó –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ <b>200‚ÇΩ</b>', parse_mode='HTML')
#    except Exception as E:
#        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
#        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
#        print(E)
#        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.callback_query(F.data.in_(['invest']))
async def vklad(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    info = db.get_investINFO(callback.from_user.id)
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    msg = f'üìà –í—ã –º–æ–∂–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å: {info[3]}‚ÇΩ\n\nüí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:'
    await bot.send_message(chat_id=callback.from_user.id, text=msg, reply_markup=keyboard)
    await state.set_state(Form.invest)


@router.message(Form.invest)
async def new_invest(message: Message, state: FSMContext):
    try:
        invest = float(message.text)
        balance = db.get_balance(message.from_user.id)
        balance = float(balance[0])
        if balance >= invest:
            db.new_invest(message.from_user.id, invest)
            row = [InlineKeyboardButton(text='üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer(f'‚úÖ –í—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏: {invest}‚ÇΩ', reply_markup=keyboard)
            await state.clear()
        else:
            row = [InlineKeyboardButton(text='üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data='cash-in')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.', reply_markup=keyboard)
            await state.update_data(calc=float(message.text))
            await state.set_state(Form.calc)
            await state.clear()

    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin']))
async def admin_panel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    row1 = [InlineKeyboardButton(text='–ò–Ω–≤–µ—Å—Ç.–±–∞–ª–∞–Ω—Å', callback_data='admin_invest-bal'),
            InlineKeyboardButton(text='–í—ã–≤–æ–¥.–±–∞–ª–∞–Ω—Å', callback_data='admin_vivod-bal')]
    row2 = [InlineKeyboardButton(text='–í—ã–¥–∞—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='admin_give-status'),
            InlineKeyboardButton(text='–ó–∞–±—Ä–∞—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data='admin_take-status')]
    row3 = [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥', callback_data='admin_newpromo'),
            InlineKeyboardButton(text='–†–∞—Å—Å—ã–ª–∫–∞', callback_data='admin_rassilka')]
    row4 = [InlineKeyboardButton(text='–†–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='admin_rekviziti'),
            InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ—Ñ.–Ω–∞–≥—Ä–∞–¥—É', callback_data='admin_change-ref')]
    rows = [row1, row2, row3, row4]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    await bot.send_message(chat_id=callback.from_user.id, text='<b>üëî –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤:',
                           parse_mode='HTML', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin_vivod-bal']))
async def vivod_balSELECT(callback: CallbackQuery):
    await callback.message.delete()
    row1 = [InlineKeyboardButton(text='–í—ã–¥–∞—Ç—å', callback_data='admin_give-vivod-bal'),
            InlineKeyboardButton(text='–°–ø–∏—Å–∞—Ç—å', callback_data='admin_take-vivod-bal')]
    row2 = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=callback.from_user.id, text='üåê –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç:', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin_take-vivod-bal']))
async def select_take_vivod(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_vivod-bal')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100', reply_markup=keyboard)
    await state.set_state(Form.take_vivod)


@router.message(Form.take_vivod)
async def take_vivod_bal(message: Message, state: FSMContext):
    try:
        msg_info = message.text.split(', ')
        userId = msg_info[0]
        summa = float(msg_info[1])
        user_info = db.get_profile(userId)
        if user_info:
            db.take_vivodBalance(userId, summa)
            await message.answer(f'‚úÖ {summa} RUB —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}')
            await state.update_data(take_vivod=message.text)
            await state.set_state(Form.take_vivod)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.callback_query(F.data.in_(['admin_give-vivod-bal']))
async def select_give_vivod(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_vivod-bal')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100', reply_markup=keyboard)
    await state.set_state(Form.give_vivod)


@router.message(Form.give_vivod)
async def give_vivod_bal(message: Message, state: FSMContext):
    try:
        msg_info = message.text.split(', ')
        userId = msg_info[0]
        summa = float(msg_info[1])
        user_info = db.get_profile(userId)
        if user_info:
            db.give_vivodBalance(userId, summa)
            await message.answer(f'‚úÖ {summa} RUB –≤—ã–¥–∞–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}')
            await state.update_data(give_vivod=message.text)
            await state.set_state(Form.give_vivod)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.callback_query(F.data.in_(['admin_invest-bal']))
async def invest_balSELECT(callback: CallbackQuery):
    await callback.message.delete()
    row1 = [InlineKeyboardButton(text='–í—ã–¥–∞—Ç—å', callback_data='admin_give-invest-bal'),
            InlineKeyboardButton(text='–°–ø–∏—Å–∞—Ç—å', callback_data='admin_take-invest-bal')]
    row2 = [InlineKeyboardButton(text='–°–ø–∏—Å–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', callback_data='adimn_take-in-invest'),
            InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=callback.from_user.id, text='üåê –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø—É–Ω–∫—Ç:', reply_markup=keyboard)


@router.callback_query(F.data.in_(['adimn_take-in-invest']))
async def select_invest_bal(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_invest-bal')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100', reply_markup=keyboard)
    await state.set_state(Form.take_inInvest)


@router.message(Form.take_inInvest)
async def give_invest_bal(message: Message, state: FSMContext):
    try:
        msg_info = message.text.split(', ')
        userId = msg_info[0]
        summa = float(msg_info[1])
        user_info = db.get_profile(userId)
        if user_info:
            db.take_inInvestBalance(userId, summa)
            await message.answer(f'‚úÖ {summa} RUB —Å–ø–∏—Å–∞–Ω—ã —Å –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}')
            await state.update_data(take_inInvest=message.text)
            await state.set_state(Form.take_inInvest)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.callback_query(F.data.in_(['admin_take-invest-bal']))
async def select_invest_bal(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_invest-bal')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100', reply_markup=keyboard)
    await state.set_state(Form.take_invest)


@router.message(Form.take_invest)
async def give_invest_bal(message: Message, state: FSMContext):
    try:
        msg_info = message.text.split(', ')
        userId = msg_info[0]
        summa = float(msg_info[1])
        user_info = db.get_profile(userId)
        if user_info:
            db.take_investBalance(userId, summa)
            await message.answer(f'‚úÖ {summa} RUB —Å–ø–∏—Å–∞–Ω—ã —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}')
            await state.update_data(take_invest=message.text)
            await state.set_state(Form.take_invest)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.callback_query(F.data.in_(['admin_give-invest-bal']))
async def select_invest_bal(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_invest-bal')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é!\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100', reply_markup=keyboard)
    await state.set_state(Form.give_invest)


@router.message(Form.give_invest)
async def give_invest_bal(message: Message, state: FSMContext):
    try:
        msg_info = message.text.split(', ')
        userId = msg_info[0]
        summa = float(msg_info[1])
        user_info = db.get_profile(userId)
        if user_info:
            db.give_investBalance(userId, summa)
            await message.answer(f'‚úÖ {summa} RUB –≤—ã–¥–∞–Ω—ã –Ω–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {userId}')
            await state.update_data(give_invest=message.text)
            await state.set_state(Form.give_invest)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.callback_query(F.data.in_(['admin_take-status']))
async def status_selectUSER(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ç–∞—Ç—É—Å–∞:',
                           reply_markup=keyboard)
    await state.set_state(Form.user)


@router.message(Form.user)
async def status_giveUSER(message: Message, state: FSMContext):
    try:
        userId = int(message.text)
        user = db.get_profile(userId)
        if user:
            db.change_vip(userId, 0)
            await message.answer('‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç!')
            await state.update_data(user=message.text)
            await state.set_state(Form.user)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin_give-status']))
async def status_select(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    row1 = [InlineKeyboardButton(text='üí∏ VIP', callback_data='admin-giveVIP'),
            InlineKeyboardButton(text='üëë PREMIUM', callback_data='admin-givePREMIUM')]
    row2 = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=callback.from_user.id, text='‚öú –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–¥–∞—á–∏:', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin-giveVIP']))
async def status_selectVIP(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_give-status')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ VIP:',
                           reply_markup=keyboard)
    await state.set_state(Form.vip)


@router.message(Form.vip)
async def status_giveVIP(message: Message, state: FSMContext):
    try:
        userId = int(message.text)
        user = db.get_profile(userId)
        if user:
            db.change_vip(userId, 1)
            await message.answer('‚úÖ VIP —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!')
            await state.update_data(vip=message.text)
            await state.set_state(Form.vip)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin-givePREMIUM']))
async def status_selectPREMIUM(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_give-status')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='üÜî –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ PREMIUM:',
                           reply_markup=keyboard)
    await state.set_state(Form.premium)


@router.message(Form.premium)
async def status_givePREMIUM(message: Message, state: FSMContext):
    try:
        userId = int(message.text)
        user = db.get_profile(userId)
        if user:
            db.change_vip(userId, 2)
            await message.answer('‚úÖ PREMIUM —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω!')
            await state.update_data(premium=message.text)
            await state.set_state(Form.premium)
            await state.clear()
        else:
            await message.answer('‚ùå –î–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin_rekviziti']))
async def change_rekviziti(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    row1 = [InlineKeyboardButton(text='–ö–∞—Ä—Ç–∞', callback_data='edit-karta'),
            InlineKeyboardButton(text='BITCOIN', callback_data='edit-btc')]
    row2 = [InlineKeyboardButton(text='ETHEREUM', callback_data='edit-eth'),
            InlineKeyboardButton(text='LTC', callback_data='edit-ltc')]
    row3 = [InlineKeyboardButton(text='TON', callback_data='edit-ton'),
            InlineKeyboardButton(text='ATOM', callback_data='edit-atom')]
    row4 = [InlineKeyboardButton(text='SOL', callback_data='edit-sol'),
            InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2, row3, row4])
    await bot.send_message(chat_id=callback.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤:',
                           reply_markup=keyboard)


@router.callback_query(F.data.in_(['edit-karta']))
async def edit_karta(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_rekviziti')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)
    await state.set_state(Form.karta)


@router.message(Form.karta)
async def new_karta(message: Message, state: FSMContext):
    db.new_karta(message.text)
    await state.update_data(karta=message.text)
    await state.set_state(Form.karta)
    await state.clear()
    await message.answer(f'–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "–ö–∞—Ä—Ç–∞": {message.text}')


@router.callback_query(F.data.in_(['edit-btc']))
async def edit_karta(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_rekviziti')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)
    await state.set_state(Form.btc)


@router.message(Form.btc)
async def new_karta(message: Message, state: FSMContext):
    db.new_btc(message.text)
    await state.update_data(btc=message.text)
    await state.set_state(Form.btc)
    await state.clear()
    await message.answer(f'–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "BITCOIN": {message.text}')


@router.callback_query(F.data.in_(['edit-eth']))
async def edit_karta(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_rekviziti')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)
    await state.set_state(Form.eth)


@router.message(Form.eth)
async def new_karta(message: Message, state: FSMContext):
    db.new_eth(message.text)
    await state.update_data(eth=message.text)
    await state.set_state(Form.eth)
    await state.clear()
    await message.answer(f'–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "ETHEREUM": {message.text}')


@router.callback_query(F.data.in_(['edit-ltc']))
async def edit_karta(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_rekviziti')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)
    await state.set_state(Form.ltc)


@router.message(Form.ltc)
async def new_karta(message: Message, state: FSMContext):
    db.new_ltc(message.text)
    await state.update_data(ltc=message.text)
    await state.set_state(Form.ltc)
    await state.clear()
    await message.answer(f'–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "LTC": {message.text}')


@router.callback_query(F.data.in_(['edit-ton']))
async def edit_karta(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_rekviziti')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)
    await state.set_state(Form.ton)


@router.message(Form.ton)
async def new_karta(message: Message, state: FSMContext):
    db.new_ton(message.text)
    await state.update_data(ton=message.text)
    await state.set_state(Form.ton)
    await state.clear()
    await message.answer(f'–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "TON": {message.text}')


@router.callback_query(F.data.in_(['edit-atom']))
async def edit_karta(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_rekviziti')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)
    await state.set_state(Form.atom)


@router.message(Form.atom)
async def new_karta(message: Message, state: FSMContext):
    db.new_atom(message.text)
    await state.update_data(atom=message.text)
    await state.set_state(Form.atom)
    await state.clear()
    await message.answer(f'–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "ATOM": {message.text}')


@router.callback_query(F.data.in_(['edit-sol']))
async def edit_karta(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin_rekviziti')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)
    await state.set_state(Form.sol)


@router.message(Form.sol)
async def new_karta(message: Message, state: FSMContext):
    db.new_sol(message.text)
    await state.update_data(sol=message.text)
    await state.set_state(Form.sol)
    await state.clear()
    await message.answer(f'–ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã "SOL": {message.text}')


@router.callback_query(F.data.in_(['admin_change-ref']))
async def change_ref(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    cur_refPrize = db.get_refPrize()
    msg = f'üí≥ –¢–µ–∫—É—â–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>{cur_refPrize[0]}‚ÇΩ</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:'
    await bot.send_message(chat_id=callback.from_user.id, text=msg, reply_markup=keyboard, parse_mode='HTML')
    await state.set_state(Form.ref)


@router.callback_query(F.data.in_(['admin_newpromo']))
async def newpromo(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üî∞ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–≥—Ä–∞–¥–∞, –∫–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–æ–º–æ–∫–æ–¥, 100, 5',
                           reply_markup=keyboard)
    await state.set_state(Form.promo)


@router.message(Form.promo)
async def new_promo(message: Message, state: FSMContext):
    try:
        promo = message.text.split(', ')
        name = promo[0]
        prize = float(promo[1])
        activate = int(promo[2])
        db.newpromo(name, prize, activate)
        await message.answer(f'üî∞ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ "{name}"\nüèÜ –ù–∞–≥—Ä–∞–¥–∞: {prize} RUB\nüëÅ‚Äçüó® –ê–∫—Ç–∏–≤–∞—Ü–∏–π: {activate}')
        await state.update_data(promo=message.text)
        await state.set_state(Form.promo)
        await state.clear()
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.message(Form.ref)
async def changeReferal(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        db.update_refPrize(summa)
        await state.update_data(ref=float(message.text))
        await state.set_state(Form.ref)
        await state.clear()
        await message.answer(f'‚úÖ –ù–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: <b>{summa}‚ÇΩ</b>', parse_mode='HTML')
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.callback_query(F.data.in_(['admin_rassilka']))
async def rassilka(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚¨Ö –ù–∞–∑–∞–¥', callback_data='admin')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                           reply_markup=keyboard)
    await state.set_state(Form.rassilka)


@router.message(Form.rassilka)
async def start_rassilka(message: Message, state: FSMContext):
    users = db.get_allUsers()
    await message.answer('üí¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!')
    await state.update_data(rassilka=message)
    await state.set_state(Form.rassilka)
    await state.clear()
    for userId in users:
        try:
            await message.copy_to(chat_id=userId[0])
        except Exception as E:
            print(E)
    await message.answer('‚úî –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!')


@router.callback_query(F.data.in_(['profile']))
async def callback_profile(callback: CallbackQuery):
    user = db.get_profile(callback.from_user.id)
    status = user[3]
    match status:
        case 0:
            status = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        case 1:
            status = 'VIP'
        case 2:
            status = 'PREMIUM'
    if callback.from_user.id == admin:
        row1 = [InlineKeyboardButton(text='‚ûï –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å', callback_data='buyVIP')]
        row2 = [InlineKeyboardButton(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='referal-system')]
        row3 = [InlineKeyboardButton(text='üóíÔ∏è –ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')]
        row4 = [InlineKeyboardButton(text='üëî –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin')]
        rows = [row1, row2, row3, row4]
    else:
        row1 = [InlineKeyboardButton(text='‚ûï –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å', callback_data='buyVIP')]
        row2 = [InlineKeyboardButton(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='referal-system')]
        row3 = [InlineKeyboardButton(text='üóíÔ∏è –ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')]

        rows = [row1, row2, row3]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    income = round(float(user[8]), 2)
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üÜî –í–∞—à ID: <code>{callback.from_user.id}</code>\n\nüè¶ –î–æ—Ö–æ–¥ –≤ —Å—É—Ç–∫–∏: <b>{income} RUB</b>\nüí¥ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: <b>{user[5]} RUB</b>\nüí¥ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{user[6]} RUB</b>\n\n<b>üëë –°—Ç–∞—Ç—É—Å: {status}\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞: {user[4]} %</b>\n<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[2]}</b> <a href="https://habrastorage.org/webt/gl/cs/zr/glcszryibrluuxrswulrexyni8s.png">‚†Ä</a>',
                           parse_mode='HTML', reply_markup=keyboard
                           )


@router.callback_query(F.data.in_(['cash-out']))
async def cash_outSELECT(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    row1 = [InlineKeyboardButton(text='‚ûñ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ (–†–§)', callback_data='cash_outCARD')]
    row2 = [InlineKeyboardButton(text='‚ûñ –°–ë–ü (–†–§)', callback_data='cash_outSBP')]
    # row3 = [InlineKeyboardButton(text='‚ûñ Yoomoney (–†–§)', callback_data='cash_outYOOMONEY')]
    row4 = [InlineKeyboardButton(text='‚ûñ USDT', callback_data='cash_out_usdt')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2, row4])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ <a href="https://habrastorage.org/webt/_f/mq/xr/_fmqxrxhfmx0mtokoaagz31hqyi.png">‚†Ä</a>',
                           reply_markup=keyboard,
                           parse_mode='HTML')


@router.callback_query(F.data.in_(['cash_outYOOMONEY']))
async def cash_outYOOMONEY(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    rekv = db.get_userRekvYOOMONEY(callback.from_user.id)
    bal = db.get_balance(callback.from_user.id)
    row1 = [InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='cash_outYOOMONEY-summa')]
    row2 = [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='update-userRekvYOOMONEY')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'‚ôª –í—ã–≤–æ–¥ –Ω–∞ <b>–ÆMoney (–†–§)</b>\n\n‚ñ™ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: <b>3%</b>\n‚ñ™ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>\n\nüë§ <b>–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>: {rekv[0]}\n\nüíµ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{bal[1]}</b>',
                           reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.in_(['cash_outSBP']))
async def cash_outSBP(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    rekv = db.get_userRekvSBP(callback.from_user.id)
    bal = db.get_balance(callback.from_user.id)
    row1 = [InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='cash_outSBP-select')]
    row2 = [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='update-userRekvSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'‚ôª –í—ã–≤–æ–¥ <b>–°–ë–ü (–†–§)</b>\n\n‚ñ™ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: <b>3%</b>\n‚ñ™ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>\n\nüë§ <b>–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>: {rekv[0]}\n\nüíµ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{bal[1]}</b>',
                           reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.in_(['cash_outSBP-select']))
async def selectSBPbank(callback: CallbackQuery):
    rekv = db.get_userRekvSBP(callback.from_user.id)
    if rekv[0] == '–Ω–µ —É–∫–∞–∑–∞–Ω—ã':
        return await callback.answer(text='üìõ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!', show_alert=True)
    row1 = [InlineKeyboardButton(text='–°–±–µ—Ä–±–∞–Ω–∫', callback_data='SBP-sber'),
            InlineKeyboardButton(text='–í–¢–ë', callback_data='SBP-vtb')]
    row2 = [InlineKeyboardButton(text='–ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫', callback_data='SBP-gazprombank'),
            InlineKeyboardButton(text='–ê–ª—å—Ñ–∞–ë–∞–Ω–∫', callback_data='SBP-alfa')]
    row3 = [InlineKeyboardButton(text='–†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫', callback_data='SBP-rossselxozbank'),
            InlineKeyboardButton(text='–¢-–ë–∞–Ω–∫', callback_data='SBP-tbank')]
    row4 = [InlineKeyboardButton(text='–†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –±–∞–Ω–∫', callback_data='SBP-raiffbank')]
    row5 = [InlineKeyboardButton(text='‚ûñ Yoomoney (–†–§)', callback_data='cash_outYOOMONEY')]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2, row3, row4, row5])
    await bot.send_message(chat_id=callback.from_user.id, text='üè¶ –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:', reply_markup=keyboard)


@router.callback_query(F.data.in_(['SBP-sber']))
async def vvodSumma_sber(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaSber)


@router.callback_query(F.data.in_(['SBP-vtb']))
async def vvodSumma_vtb(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaVtb)


@router.callback_query(F.data.in_(['SBP-gazprombank']))
async def vvodSumma_gazprom(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaGazprom)


@router.callback_query(F.data.in_(['SBP-alfa']))
async def vvodSumma_alfa(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaAlfa)


@router.callback_query(F.data.in_(['SBP-rossselxozbank']))
async def vvodSumma_rossselxozbank(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaRosssel)


@router.callback_query(F.data.in_(['SBP-tbank']))
async def vvodSumma_tbank(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaTink)


@router.callback_query(F.data.in_(['SBP-raiffbank']))
async def vvodSumma_sber(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaRaif)


@router.callback_query(F.data.in_(['cash_outCARD']))
async def cash_outCARD(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.delete()
    rekv = db.get_userRekvCARD(callback.from_user.id)
    bal = db.get_balance(callback.from_user.id)
    row1 = [InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='cash_outCARD-summa')]
    row2 = [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='update-userRekvCARD')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'‚ôª –í—ã–≤–æ–¥ –Ω–∞ <b>–±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É (–†–§)</b>\n\n‚ñ™ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: <b>3% + 50 ‚ÇΩ</b>\n‚ñ™ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>1100 ‚ÇΩ</b>\n\nüë§ <b>–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>: {rekv[0]}\n\nüíµ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{bal[1]}</b>',
                           reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.in_(['cash_outCARD-summa']))
async def vvodSumma_cashoutCARD(callback: CallbackQuery, state: FSMContext):
    rekv = db.get_userRekvCARD(callback.from_user.id)
    if rekv[0] == '–Ω–µ —É–∫–∞–∑–∞–Ω—ã':
        return await callback.answer(text='üìõ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!', show_alert=True)
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outCARD')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaCard)


@router.callback_query(F.data.in_(['cash_outYOOMONEY-summa']))
async def vvodSumma_cashoutYOOMONEY(callback: CallbackQuery, state: FSMContext):
    rekv = db.get_userRekvYOOMONEY(callback.from_user.id)
    if rekv[0] == '–Ω–µ —É–∫–∞–∑–∞–Ω—ã':
        return await callback.answer(text='üìõ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã!', show_alert=True)
    await callback.message.delete()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash_outYOOMONEY')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='‚ôª –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞:', reply_markup=keyboard)
    await state.set_state(Form.summaYOOMONEY)


@router.callback_query(F.data.in_(['update-userRekvCARD']))
async def update_userRekvCARD(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.user_rekvizitiCARD)
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:', reply_markup=keyboard)


@router.callback_query(F.data.in_(['update-userRekvSBP']))
async def update_userRekvSBP(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.user_rekvizitiSBP)
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='üí≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:\n‚ôªÔ∏è –ü—Ä–∏–º–µ—Ä: +77053748287',
                           reply_markup=keyboard)


@router.callback_query(F.data.in_(['update-userRekvYOOMONEY']))
async def update_userRekvYOOMONEY(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Form.user_rekvizitiYOOMONEY)
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text='‚ñ™Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney\n‚ôªÔ∏è –ü—Ä–∏–º–µ—Ä: 4433992266440022', reply_markup=keyboard)


@router.message(Form.user_rekvizitiYOOMONEY)
async def change_userRekvYOOMONEY(message: Message, state: FSMContext):
    await state.clear()
    # data = await state.get_data()
    # print(data)
    db.update_userRekvYOOMONEY(message.from_user.id, message.text)
    await message.answer('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
    # await state.set_state(Form.summaYOOMONEY)
    rekv = db.get_userRekvYOOMONEY(message.from_user.id)
    bal = db.get_balance(message.from_user.id)
    row1 = [InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='cash_outYOOMONEY-summa')]
    row2 = [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='update-userRekvYOOMONEY')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'‚ôª –í—ã–≤–æ–¥ –Ω–∞ <b>–ÆMoney (–†–§)</b>\n\n‚ñ™ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: <b>3%</b>\n‚ñ™ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>\n\nüë§ <b>–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>: {rekv[0]}\n\nüíµ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{bal[1]}</b>',
                           reply_markup=keyboard, parse_mode='HTML')


@router.message(Form.user_rekvizitiSBP)
async def change_userRekvSBP(message: Message, state: FSMContext):
    await state.clear()
    db.update_userRekvSBP(message.from_user.id, message.text)
    await message.answer('‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!')
    rekv = db.get_userRekvSBP(message.from_user.id)
    bal = db.get_balance(message.from_user.id)
    row1 = [InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏', callback_data='cash_outSBP-select')]
    row2 = [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã', callback_data='update-userRekvSBP')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'‚ôª –í—ã–≤–æ–¥ <b>–°–ë–ü (–†–§)</b>\n\n‚ñ™ –ö–æ–º–∏—Å—Å–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: <b>3%</b>\n‚ñ™ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>\n\nüë§ <b>–í–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã</b>: {rekv[0]}\n\nüíµ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{bal[1]}</b>',
                           reply_markup=keyboard, parse_mode='HTML')


@router.message(Form.user_rekvizitiCARD)
async def change_userRekvCARD(message: Message, state: FSMContext):
    await state.clear()
    db.update_userRekvCARD(message.from_user.id, message.text)
    data = {
        "account": 849,
        "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
        "card_number": message.text
    }
    headers = {
        "Content-type": "application/json"
    }
    resp = requests.post("https://tg.keksik.io/api/1.0/payouts/check-bank-card", json=data, headers=headers)
    json_resp = resp.json()
    if json_resp['status'] == 'not_linked':
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "card-rub",
            "purse": message.text,
            "amount": 110000
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        json_resp = resp.json()
        print(json_resp)
    row = [InlineKeyboardButton(text='–ü—Ä–∏–≤—è–∑–∞—Ç—å', url=json_resp["link_bank_card"])]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await message.answer(
        '‚úÖ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –ø—Ä–∏–≤—è–∂–∏—Ç–µ –µ—ë –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n\n–û–ø–ª–∞—Ç–∏—Ç–µ 1‚ÇΩ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã\n–î–µ–Ω—å–≥–∏ –≤–µ—Ä–Ω—É—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å',
        reply_markup=keyboard)


@router.message(Form.summaYOOMONEY)
async def vvodRekvizitiYOOMONEY(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvYOOMONEY(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOyoomoney {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–ÆMoney {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaSber)
async def vvodRekvizitiSBER(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvSBP(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOsber {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–°–ë–ü –°–±–µ—Ä–±–∞–Ω–∫ {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaVtb)
async def vvodRekvizitiVTB(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvSBP(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOvtb {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–°–ë–ü –í–¢–ë {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaGazprom)
async def vvodRekvizitigazprom(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvSBP(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOgazprom {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–°–ë–ü –ì–∞–∑–ø—Ä–æ–º–±–∞–Ω–∫ {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaAlfa)
async def vvodRekvizitiafla(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvSBP(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOalfa {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–°–ë–ü –ê–ª—å—Ñ–∞-–ë–∞–Ω–∫ {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaRosssel)
async def vvodRekvizitirossel(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvSBP(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOrossel {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–°–ë–ü –†–æ—Å—Å–µ–ª—å—Ö–æ–∑–±–∞–Ω–∫ {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaTink)
async def vvodRekvizititink(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvSBP(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOtbank {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–°–ë–ü –¢-–ë–∞–Ω–∫ {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaRaif)
async def vvodRekvizitiraif(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvSBP(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOraif {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–°–ë–ü –†–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω –ë–∞–Ω–∫ {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(Form.summaCard)
async def vvodRekviziti(message: Message, state: FSMContext):
    try:
        summa = float(message.text)
        rekv = db.get_userRekvCARD(message.from_user.id)
        balance = db.get_balance(message.from_user.id)
        if float(balance[1]) >= summa:
            if summa >= 1100:
                db.take_vivodBalance(message.from_user.id, summa)
                db.update_viveli(summa)
                await bot.send_message(chat_id=message.from_user.id, text='‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
                row1 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–∞–≤—Ç–æ)',
                                             callback_data=f'cash-outAUTOCARD {message.from_user.id} {summa}')]
                row2 = [InlineKeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å (–≤—Ä—É—á–Ω—É—é)',
                                             callback_data=f'cash-outRUCH {message.from_user.id}')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
                await bot.send_message(chat_id=admin,
                                       text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ "{summa}" –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞ {rekv[0]}"',
                                       reply_markup=keyboard, parse_mode='HTML')
                await state.clear()
            else:
                row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
                keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
                await message.answer('‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>1100 ‚ÇΩ</b>', reply_markup=keyboard,
                                     parse_mode='HTML')
        else:
            row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
            await message.answer('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', reply_markup=keyboard)
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cash-out')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!', reply_markup=keyboard)


@router.message(F.text == 'üí∏ –ö–æ—à–µ–ª—ë–∫')
async def balance(message: Message, state: FSMContext):
    await state.clear()
    balance = db.get_balance(message.from_user.id)
    msg = f'üÜî –í–∞—à ID: <code>{message.from_user.id}</code>\n\nüíµ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{balance[1]} RUB</b>\nüí∏ –ë–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: <b>{balance[0]} RUB</b> <a href="https://habrastorage.org/webt/xw/3r/lw/xw3rlwidbdqxp2hhpppr7tmx8ew.png">‚†Ä</a>'
    row1 = [InlineKeyboardButton(text='‚ûï –ü–æ–ø–æ–ª–Ω–∏—Ç—å', callback_data='cash-in'),
            InlineKeyboardButton(text='‚ûñ –í—ã–≤–µ—Å—Ç–∏', callback_data='cash-out')]
    row2 = [InlineKeyboardButton(text='üè¶ VaxeeWallet', url='https://t.me/VaxeeWalletBot?start=VaxeeBot')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await message.answer(text=msg, reply_markup=keyboard, parse_mode="HTML")


@router.message(F.text == '‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def info(message: Message, state: FSMContext):
    await state.clear()
    row1 = [InlineKeyboardButton(text='üí¨ –û—Ç–∑—ã–≤—ã', url=f't.me/{otzivi_channel[1:]}')]
    row2 = [InlineKeyboardButton(text='‚öôÔ∏è –¢–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∞', url='t.me/dwmkpl'),
            InlineKeyboardButton(text='üìå –°—Ç–∞—Ç—å—è', url='https://telegra.ph/Informacionnaya-statya-06-19-4')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    await message.answer(
        text='‚Åâ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã?\n\n‚ñ™ –ü—Ä–æ—á—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é\n‚ñ™ –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –Ω–∞–ø–∏—à–∏ –Ω–∞–º <a href="https://habrastorage.org/webt/wz/dg/tn/wzdgtnw_9n6ms2xdz8ni24lir18.png">‚†Ä</a>',
        reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.in_(['referal-system']))
async def referals(callback: CallbackQuery):
    info = db.get_referals(callback.from_user.id)
    refPrize = db.get_refPrize()
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'<b>üë• –ü—Ä–∏–≥–ª–∞—à–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π</b>\n\nüóí <b>–°–ø–∏—Å–æ–∫ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:</b>\n‚ñ™ <b>{refPrize[0]}‚ÇΩ –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>\n‚ñ™ <b>5% —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–∞</b>\n‚ñ™ <b>5 VaxCoin</b>\n\nüí∏ –û—Ç—á–∏—Å–ª–µ–Ω–∏–π –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <b>{info[1]}‚ÇΩ</b>\nüë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: <b>{info[0]} —á–µ–ª.</b>\n\nüë§ –í–∞—à–∞ —Ä–µ—Ñ.—Å—Å—ã–ª–∫–∞: <code>{bot_link}?start={callback.from_user.id}</code> <a href="https://habrastorage.org/webt/g5/5b/on/g55bonelx67lob4vz8uab7koiis.png">‚†Ä</a>',
                           parse_mode='HTML')


@router.message(F.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def bot_stat(message: Message, state: FSMContext):
    await state.clear()
    row1 = [InlineKeyboardButton(text='üí∏ –¢–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤', callback_data='top-invest'),
            InlineKeyboardButton(text='üë• –¢–æ–ø —Ä–µ—Ñ–æ–≤–æ–¥–æ–≤', callback_data='top-refs')]
    row2 = [InlineKeyboardButton(text='üè¶ –¢–æ–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É VaxCoin', callback_data='top-coins')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    stats = db.get_BotStats()
    await message.answer(
        text=f'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\nüë®‚Äçüíª –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: <b>{stats[0]}</b>\nüì• –ü–æ–ø–æ–ª–Ω–∏–ª–∏: <b>{stats[1]} RUB</b>\nüì§ –í—ã–≤–µ–ª–∏: <b>{stats[2]} RUB</b> <a href="https://habrastorage.org/webt/ch/tn/qo/chtnqoz0wx0nrjculwqw_k5lhxi.png">‚†Ä</a>',
        parse_mode='HTML', reply_markup=keyboard)


@router.callback_query(F.data.in_(['top-coins']))
async def top_coins(callback: CallbackQuery):
    top = db.get_topCoins()
    smiles = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
    msg = 'üè¶ –¢–æ–ø –ø–æ VaxCoin:\n'
    iter = -1
    for username, summa in top:
        iter += 1
        msg += f'\n{smiles[iter]} <a href="https://t.me/{username}">{username}</a> VaxCoin ‚ûî {float(summa):n} üíµ'
    await bot.send_message(chat_id=callback.from_user.id, text=msg, parse_mode='HTML', disable_web_page_preview=True)


@router.callback_query(F.data.in_(['top-invest']))
async def top_invest(callback: CallbackQuery):
    top = db.get_topInvestors()
    smiles = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
    msg = 'üèÜ –¢–æ–ø –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤:\n'
    iter = -1
    for username, summa in top:
        iter += 1
        msg += f'\n{smiles[iter]} <a href="https://t.me/{username}">{username}</a> –≤–ª–æ–∂–∏–ª ‚ûî {float(summa):n}‚ÇΩ'
    await bot.send_message(chat_id=callback.from_user.id, text=msg, parse_mode='HTML', disable_web_page_preview=True)


@router.callback_query(F.data.in_(['top-refs']))
async def top_invest(callback: CallbackQuery):
    top = db.get_topReferals()
    smiles = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£', 'üîü']
    msg = 'üë• –¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º:\n'
    iter = -1
    for username, refs in top:
        iter += 1
        msg += f'\n{smiles[iter]} <a href="https://t.me/{username}">{username}</a> –ø—Ä–∏–≥–ª–∞—Å–∏–ª ‚ûî {refs}'
    await bot.send_message(chat_id=callback.from_user.id, text=msg, parse_mode='HTML', disable_web_page_preview=True)


@router.message(F.text == 'üì† –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä')
async def calculator_1(message: Message, state: FSMContext):
    await state.clear()
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await message.answer('<b>‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:</b>', parse_mode='HTML', reply_markup=keyboard)
    await state.set_state(Form.calc)


@router.message(Form.calc)
async def calculator_2(message: Message, state: FSMContext):
    try:
        await state.update_data(calc=float(message.text))
        await state.set_state(Form.calc)
        doxod = db.get_doxod(message.from_user.id)
        day = round(float(message.text) * float(doxod[1]), 2)
        month = round((float(message.text) * float(doxod[1])) * 30, 2)
        year = round((float(message.text) * float(doxod[1])) * 365, 2)
        msg = f'üí∏ –í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ –≤—ã –º–æ–∂–µ—Ç–µ <b>—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å</b> –≤–∞—à—É <b>–ø—Ä–∏–±—ã–ª—å</b>, –æ—Ç —Å—É–º–º—ã <b>–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏</b>:\n\nüìà –í–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ –≤ —Å—É—Ç–∫–∏: {doxod[0]}%\nüíµ –í–∞—à–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è: <b>{message.text} RUB</b>\n\n‚ñ™ –ü—Ä–∏–±—ã–ª—å –≤ —Å—É—Ç–∫–∏: {day}‚ÇΩ\n‚ñ™ –ü—Ä–∏–±—ã–ª—å –≤ –º–µ—Å—è—Ü: {month}‚ÇΩ\n‚ñ™ –ü—Ä–∏–±—ã–ª—å –≤ –≥–æ–¥: <b>{year}‚ÇΩ</b> <a href="https://habrastorage.org/webt/e4/7u/wp/e47uwpaczcllvou1wvr3erb03y8.png">‚†Ä</a>'
        row1 = [InlineKeyboardButton(text='‚ûï –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ', callback_data='calculate-again')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row1])
        await message.answer(text=msg, parse_mode='HTML',
                             reply_markup=keyboard)
        await state.clear()
    except Exception as E:
        print(E)
        row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
        await message.answer('‚ùå –ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!', reply_markup=keyboard)


@router.callback_query(F.data.in_(['otmena']))
async def otmena_vvoda(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await bot.send_message(chat_id=callback.from_user.id, text='‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω!')


@router.callback_query(F.data.in_('calculate-again'))
async def calculate_again(callback: CallbackQuery, state: FSMContext):
    row = [InlineKeyboardButton(text='‚≠ï –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='otmena')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id, text='<b>‚ñ™ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å:</b>',
                           parse_mode='HTML', reply_markup=keyboard)
    await state.set_state(Form.calc)


@router.message(F.text == 'üë®‚Äçüíª –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message, state: FSMContext):
    user = db.get_profile(message.from_user.id)
    await state.clear()
    status = user[3]
    match status:
        case 0:
            status = '–Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞'
        case 1:
            status = 'VIP'
        case 2:
            status = 'PREMIUM'
    if message.from_user.id == admin:
        row1 = [InlineKeyboardButton(text='‚ûï –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å', callback_data='buyVIP')]
        row2 = [InlineKeyboardButton(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='referal-system')]
        row3 = [InlineKeyboardButton(text='üóíÔ∏è –ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')]
        row4 = [InlineKeyboardButton(text='üëî –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data='admin')]
        rows = [row1, row2, row3, row4]
    else:
        row1 = [InlineKeyboardButton(text='‚ûï –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å', callback_data='buyVIP')]
        row2 = [InlineKeyboardButton(text='üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞', callback_data='referal-system')]
        row3 = [InlineKeyboardButton(text='üóíÔ∏è –ó–∞–¥–∞–Ω–∏—è', callback_data='tasks')]
        rows = [row1, row2, row3]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    income = round(float(user[8]), 2)
    await message.answer(
        text=f'üÜî –í–∞—à ID: <code>{message.from_user.id}</code>\n\nüè¶ –î–æ—Ö–æ–¥ –≤ —Å—É—Ç–∫–∏: <b>{income} RUB</b>\nüí¥ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: <b>{user[5]} RUB</b>\nüí¥ –ë–∞–ª–∞–Ω—Å –¥–ª—è –≤—ã–≤–æ–¥–∞: <b>{user[6]} RUB</b>\n\n<b>üëë –°—Ç–∞—Ç—É—Å: {status}\nüìà –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞: {user[4]} %</b>\n<b>üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user[2]}</b> <a href="https://habrastorage.org/webt/gl/cs/zr/glcszryibrluuxrswulrexyni8s.png">‚†Ä</a>',
        parse_mode='HTML', reply_markup=keyboard
    )


@router.callback_query(F.data.in_(['buyVIP']))
async def selectVIP(callback: CallbackQuery):
    await callback.message.delete()
    row1 = [InlineKeyboardButton(text='üí∏ VIP', callback_data='buy-vip')]
    row2 = [InlineKeyboardButton(text='üëë PREMIUM', callback_data='buy-premium')]
    rows = [row1, row2]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å—Ç–∞—Ç—É—Å: <a href="https://habrastorage.org/webt/hq/sh/u9/hqshu94xurl3n9oetezuxcln4ye.png">‚†Ä</a>',
                           reply_markup=keyboard, parse_mode='HTML')


@router.callback_query(F.data.in_(['buy-vip']))
async def buyVIP(callback: CallbackQuery):
    await callback.message.delete()
    row1 = [InlineKeyboardButton(text='üí∏ Keksik', web_app=WebAppInfo(url='https://tg.keksik.io/@Vaxee_bot'))]
    row2 = [InlineKeyboardButton(text='üí∏ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='pay-admin-vip')]
    row3 = [InlineKeyboardButton(text='üí∏ Yoomoney', callback_data='pay-site-vip-card')]
    rows = [row1, row2]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üèµÔ∏è| VIP\n__________________________________________\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: 5% –≤ —Å—É—Ç–∫–∏\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ VaxCoin: 2.5% –≤ —Å—É—Ç–∫–∏\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 3000‚ÇΩ\n\n‚Äº –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Keksik, –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –¥–æ–Ω–∞—Ç—É —É–∫–∞–∑—ã–≤–∞–π—Ç–µ "VIP", –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.',
                           reply_markup=keyboard)


@router.callback_query(F.data.in_(['pay-admin-vip']))
async def payAdmin_vip(callback: CallbackQuery):
    row1 = [InlineKeyboardButton(text='‚ûï –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π', callback_data='payAdmin-vip-card')]
    row2 = [InlineKeyboardButton(text='‚ûï –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data='payAdmin-vip-crypto')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row2])
    await bot.send_message(chat_id=callback.from_user.id, text='üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                           reply_markup=keyboard)


@router.callback_query(F.data.in_(['pay-admin-premium']))
async def payAdmin_vip(callback: CallbackQuery):
    row1 = [InlineKeyboardButton(text='‚ûï –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π', callback_data='payAdmin-premium-card')]
    row2 = [InlineKeyboardButton(text='‚ûï –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', callback_data='payAdmin-premium-crypto')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row2])
    await bot.send_message(chat_id=callback.from_user.id, text='üí∏ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                           reply_markup=keyboard)


@router.callback_query(F.data.in_(['payAdmin-vip-card']))
async def payAdminCard_vip(callback: CallbackQuery):
    name = db.get_rekviziti('karta')
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª',
                                callback_data=f'pay-admin-vip-card-checkpayment {callback.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üí∏ –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>3000‚ÇΩ</b>\n\nüíµ <b>–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n\n‚ñ™ Yoomoney: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)


@router.callback_query(F.data.in_(['payAdmin-premium-card']))
async def payAdminCard_vip(callback: CallbackQuery):
    name = db.get_rekviziti('karta')
    row = [InlineKeyboardButton(text='‚úÖ –û–ø–ª–∞—Ç–∏–ª',
                                callback_data=f'pay-admin-premium-card-checkpayment {callback.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=callback.from_user.id,
                           text=f'üí∏ –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>8000‚ÇΩ</b>\n\nüíµ <b>–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n\n‚ñ™ Yoomoney: <code>{name[0]}</code>\n\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', reply_markup=keyboard, disable_web_page_preview=True)


@router.callback_query(F.data.in_(['payAdmin-vip-crypto', 'payAdmin-premium-crypto']))
async def vipCrypto(callback: CallbackQuery):
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üí∏ –î–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                           parse_mode='HTML', disable_web_page_preview=True)


@router.callback_query(F.data.in_(['buy-premium']))
async def buyPREMIUM(callback: CallbackQuery):
    row1 = [InlineKeyboardButton(text='üí∏ Keksik', web_app=WebAppInfo(url='https://tg.keksik.io/@Vaxee_bot'))]
    row2 = [InlineKeyboardButton(text='üí∏ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', callback_data='pay-admin-premium')]
    row3 = [InlineKeyboardButton(text='üí∏ Yoomoney', callback_data='pay-site-premium-card')]
    rows = [row1, row2]
    keyboard = InlineKeyboardMarkup(inline_keyboard=rows)
    await bot.send_message(chat_id=callback.from_user.id,
                           text='üèµÔ∏è| PREMIUM\n__________________________________________\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: 10% –≤ —Å—É—Ç–∫–∏\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ VaxCoin: 5% –≤ —Å—É—Ç–∫–∏\n\nüíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: 8000‚ÇΩ\n\n‚Äº –ü—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ Keksik, –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫ –¥–æ–Ω–∞—Ç—É —É–∫–∞–∑—ã–≤–∞–π—Ç–µ "PREMIUM", –∏–Ω–∞—á–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.',
                           reply_markup=keyboard)


@router.callback_query(F.data.in_(['pay-site-vip-card']))
async def paySite_premium(callback: CallbackQuery):
    label = generate_random_string(12)
    quickpay = Quickpay(
        receiver="4100118701003387",
        quickpay_form="shop",
        targets="VIP –°—Ç–∞—Ç—É—Å",
        paymentType="SB",
        sum=3000,
        label=label
    )
    row1 = [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=quickpay.redirected_url)]
    row2 = [InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'pay-site-vip-card-checkpayment {label}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    msg = f'üí∏ –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>3000‚ÇΩ</b>\n\nüíµ <b>–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>\n\n‚úÖ <b>–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç</b>\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>'
    await bot.send_message(chat_id=callback.from_user.id, text=msg, parse_mode='HTML', reply_markup=keyboard,
                           disable_web_page_preview=True)


@router.callback_query(F.data.in_(['pay-site-premium-card']))
async def paySite_premium(callback: CallbackQuery):
    label = generate_random_string(12)
    quickpay = Quickpay(
        receiver="4100118701003387",
        quickpay_form="shop",
        targets="PREMIUM –°—Ç–∞—Ç—É—Å",
        paymentType="SB",
        sum=8000,
        label=label
    )
    row1 = [InlineKeyboardButton(text='üí≥ –û–ø–ª–∞—Ç–∏—Ç—å', url=quickpay.redirected_url)]
    row2 = [
        InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É', callback_data=f'pay-site-premium-card-checkpayment {label}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row1, row2])
    msg = f'üí∏ –°—É–º–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã <b>8000‚ÇΩ</b>\n\nüíµ <b>–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</b>\n\n‚úÖ <b>–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç</b>\n\n<code>–ö–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–≤—è–∑–∏:</code> <a href="https://t.me/dwmkpl">@dwmkpl</a>'
    await bot.send_message(chat_id=callback.from_user.id, text=msg, parse_mode='HTML', reply_markup=keyboard,
                           disable_web_page_preview=True)


@router.message(Form.payAdminCard_vip)
async def checkpaymentAdmin_vip(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'admin-accept-vip {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-vip {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã VIP',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(payAdminCard_vip=message)
    await state.set_state(Form.payAdminCard_vip)
    await state.clear()


@router.message(Form.payAdminCard_premium)
async def checkpaymentAdmin_premium(message: Message, state: FSMContext):
    await message.copy_to(admin)
    row = [InlineKeyboardButton(text='‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'admin-accept-premium {message.from_user.id}'),
           InlineKeyboardButton(text='‚õî –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data=f'admin-decline-premium {message.from_user.id}')]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[row])
    await bot.send_message(chat_id=admin,
                           text=f'üÜî <code>{message.from_user.id}</code> –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã PREMIUM',
                           reply_markup=keyboard, parse_mode='HTML')
    await state.update_data(payAdminCard_premium=message)
    await state.set_state(Form.payAdminCard_premium)
    await state.clear()


@router.callback_query(F.data.contains("admin-vvod-usdt"))
async def pay_usdt(message: CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
    await state.set_state(Form.admin_replenishment_usdt)


@router.callback_query(F.data.contains("admin-decline-usdt"))
async def decline_usdt(message: CallbackQuery, state: FSMContext):
    user_id = message.data.split(' ')[1]
    await bot.send_message(chat_id=message.from_user.id,
                           text='<b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ —Å—É–º–º—ã –æ—Ç–∫–ª–æ–Ω–µ–Ω</b>', parse_mode='HTML')
    await bot.send_message(chat_id=user_id,
                           text='‚ùå –û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n‚Åâ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @dwmkpl')
    await state.clear()


@router.message(Form.admin_replenishment_usdt)
async def replenishment_usdt(message: Message, state: FSMContext):
    data = message.text.split(",")
    user_id = int(data[0].replace(" ", ""))
    amount = float(data[1].replace(" ", ""))
    user = db.get_profile(user_id)
    user_amount = float(user[5]) + amount
    Transaction.replenishment(user_id, user_amount)
    db.update_popolnili(user_amount)
    ref = db.get_ref(user_id)
    if ref[0] != 0:
        db.give_investBalance(ref[0], user_amount * 0.05)
        db.update_refDoxod(ref[0], user_amount * 0.05)
    await bot.send_message(chat_id=user_id,
                           text=f'‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                           parse_mode='HTML')
    await bot.send_message(chat_id=message.from_user.id, text="–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω")
    await state.clear()


@router.callback_query()
async def pay_site_premium_card_chek(callback: CallbackQuery, state: FSMContext):
    if callback.data.split(' ')[0] == 'pay-site-premium-card-checkpayment':
        label = callback.data.split(' ')[1]
        client = Client(yoomoney_token)
        history = client.operation_history(label=label)
        if len(history.operations) == 1:
            await callback.message.delete()
            await bot.send_message(chat_id=callback.from_user.id,
                                   text='‚úÖ <b>–°—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–æ—Ö–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω</b>', parse_mode='HTML')
            db.change_vip(callback.from_user.id, 2)
        else:
            await callback.answer(
                '‚ùå –û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n‚Åâ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @dwmkpl',
                show_alert=True)
    elif callback.data.split(' ')[0] == 'pay-site-vip-card-checkpayment':
        label = callback.data.split(' ')[1]
        client = Client(yoomoney_token)
        history = client.operation_history(label=label)
        if len(history.operations) == 1:
            await callback.message.delete()
            await bot.send_message(chat_id=callback.from_user.id,
                                   text='‚úÖ <b>–°—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –¥–æ—Ö–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω</b>', parse_mode='HTML')
            db.change_vip(callback.from_user.id, 1)
        else:
            await callback.answer(
                '‚ùå –û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n‚Åâ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @dwmkpl',
                show_alert=True)
    elif callback.data.split(' ')[0] == 'cash_inSITE-card-check':
        label = callback.data.split(' ')[1]
        client = Client(yoomoney_token)
        history = client.operation_history(label=label)
        if len(history.operations) == 1:
            await callback.message.delete()
            await bot.send_message(chat_id=callback.from_user.id,
                                   text=f'‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π</b>',
                                   parse_mode='HTML')
            db.give_investBalance(callback.from_user.id, history.operations[0].amount)
            db.update_popolnili(history.operations[0].amount)
            ref = db.get_ref(callback.from_user.id)
            if ref[0] != 0:
                db.give_investBalance(ref[0], history.operations[0].amount * 0.05)
                db.update_refDoxod(ref[0], history.operations[0].amount * 0.05)
        else:
            await callback.answer(
                '‚ùå –û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω\n\n‚Åâ –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É @dwmkpl',
                show_alert=True)
    elif callback.data.split(' ')[0] == 'pay-admin-vip-card-checkpayment':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=user_id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
        await state.set_state(Form.payAdminCard_vip)
    elif callback.data.split(' ')[0] == 'pay-admin-premium-card-checkpayment':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=user_id, text='üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.')
        await state.set_state(Form.payAdminCard_premium)
    elif callback.data.split(' ')[0] == 'admin-accept-vip':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚úÖ VIP –≤—ã–¥–∞–Ω–∞')
        await bot.send_message(chat_id=user_id, text=f'‚úÖ <b>–°—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω</b>',
                               parse_mode='HTML')
        db.change_vip(user_id, 1)
    elif callback.data.split(' ')[0] == 'admin-accept-premium':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚úÖ PREMIUM –≤—ã–¥–∞–Ω–∞')
        await bot.send_message(chat_id=user_id, text=f'‚úÖ <b>–°—Ç–∞—Ç—É—Å –≤—ã–¥–∞–Ω –≤–∞—à –ø—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞ —É–≤–µ–ª–∏—á–µ–Ω</b>',
                               parse_mode='HTML')
        db.change_vip(user_id, 2)
    elif callback.data.split(' ')[0] == 'admin-decline-vip':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-decline-premium':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-vvod-card':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
        await state.set_state(Form.adminVvod_card)
    elif callback.data.split(' ')[0] == 'admin-decline-card':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-vvod-btc':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
        await state.set_state(Form.adminVvod_btc)
    elif callback.data.split(' ')[0] == 'admin-decline-btc':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-vvod-eth':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
        await state.set_state(Form.adminVvod_eth)
    elif callback.data.split(' ')[0] == 'admin-decline-eth':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-vvod-ltc':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
        await state.set_state(Form.adminVvod_ltc)
    elif callback.data.split(' ')[0] == 'admin-decline-ltc':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-vvod-ton':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
        await state.set_state(Form.adminVvod_ton)
    elif callback.data.split(' ')[0] == 'admin-decline-ton':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-vvod-atom':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
        await state.set_state(Form.adminVvod_atom)
    elif callback.data.split(' ')[0] == 'admin-decline-atom':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'admin-vvod-sol':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=callback.from_user.id,
                               text='–í–≤–µ–¥–∏—Ç–µ ID –∏ —Å—É–º–º—É –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 123456, 100')
        await state.set_state(Form.adminVvod_sol)
    elif callback.data.split(' ')[0] == 'admin-decline-sol':
        user_id = callback.data.split(' ')[1]
        await bot.send_message(chat_id=admin, text='‚õî –û—Ç–∫–∞–∑–∞–Ω–æ')
        await bot.send_message(chat_id=user_id,
                               text=f'‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n‚Åâ <b>–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É</b> <a href="https://t.me/dwmkpl">@dwmkpl</a>',
                               parse_mode='HTML')
    elif callback.data.split(' ')[0] == 'cash-outRUCH':
        user_id = callback.data.split(' ')[1]
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=callback.from_user.id, text='–£—Å–ø–µ—à–Ω–æ!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOCARD':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvCARD(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "card-rub",
            "purse": rekv,
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOsber':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvSBP(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "sbp",
            "purse": rekv,
            "bank": "1enc00000111",
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOvtb':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvSBP(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "sbp",
            "purse": rekv,
            "bank": "1enc00000005",
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOgazprom':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvSBP(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "sbp",
            "purse": rekv,
            "bank": "1enc00000001",
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOalfa':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvSBP(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "sbp",
            "purse": rekv,
            "bank": "1enc00000008",
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOrossel':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvSBP(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "sbp",
            "purse": rekv,
            "bank": "1enc00000020",
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOtbank':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvSBP(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "sbp",
            "purse": rekv,
            "bank": "1enc00000004",
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOraif':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvSBP(user_id)
        rekv = rekv[0]
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "sbp",
            "purse": rekv,
            "bank": "1enc00000007",
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')
    elif callback.data.split(' ')[0] == 'cash-outAUTOyoomoney':
        user_id = callback.data.split(' ')[1]
        summa = float(callback.data.split(' ')[2])
        rekv = db.get_userRekvYOOMONEY(user_id)
        rekv = rekv[0]
        # new_rekv = f"{rekv[0:2]} {rekv[2:5]} {rekv[5:8]} {rekv[8:10]} {rekv[10:12]}"
        data = {
            "account": 849,
            "token": "5be1974b4c0e8f289ac074dad69f1477bfcf4831213ded78f7",
            "system": "yoomoney",
            "purse": rekv,
            "amount": f"{int(summa)}00"
        }
        headers = {
            "Content-type": "application/json"
        }
        resp = requests.post("https://tg.keksik.io/api/1.0/payouts/create", json=data, headers=headers)
        row1 = [InlineKeyboardButton(text='‚úÖ –û—Ç–∑—ã–≤—ã', url='https://t.me/vaxeeotz/8')]
        keyboard1 = InlineKeyboardMarkup(inline_keyboard=[row1])
        await bot.send_message(chat_id=user_id,
                               text='‚ôª|–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\nüóØ –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –ø–æ—Å–ª–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤',
                               reply_markup=keyboard1)
        await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!')
        json_resp = resp.json()
        if json_resp["success"] == False:
            db.give_vivodBalance(user_id, summa)
            await bot.send_message(chat_id=admin, text='–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!')


@router.message()
async def check_promo(message: Message):
    # promo = db.get_promo(message.from_user.id, message.text)
    all_promo = db.get_all_promo()
    for promo in all_promo:
        if message.text == promo:
            promo_select = db.get_promo(message.from_user.id, promo)
            res = db.use_promo(message.from_user.id, str(promo_select[0]))
            if res:
                return await message.answer(
                    f'üíØ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüí≤ –ù–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{promo[1]}‚ÇΩ</b>',
                    parse_mode='HTML')

            else:
                return await message.answer(
                    'üìõ –ê–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –∏–ª–∏ –≤—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!')

    # if promo:
    #     res = db.use_promo(message.from_user.id, str(promo[0]))
    #     if res:
    #         await message.answer(f'üíØ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüí≤ –ù–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ <b>{promo[1]}‚ÇΩ</b>',
    #                              parse_mode='HTML')

    await message.answer(f'üìõ {message.text} - —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç!')


bot_router = router
